'\"
'\" Copyright 1989 Regents of the University of California
'\" Permission to use, copy, modify, and distribute this
'\" documentation for any purpose and without fee is hereby
'\" granted, provided that this notice appears in all copies.
'\" The University of California makes no representations about
'\" the suitability of this material for any purpose.  It is
'\" provided "as is" without express or implied warranty.
'\" 
'\" $Header: /user6/ouster/tcl/man/RCS/Hash.3,v 1.5 93/01/31 15:35:35 ouster Exp $ SPRITE (Berkeley)
'\" 
.so man.macros
.HS Hax_Hash hax
.BS
.SH NAME
.na
Hax_InitHashTable, Hax_DeleteHashTable, Hax_CreateHashEntry, Hax_DeleteHashEntry, Hax_FindHashEntry, Hax_GetHashValue, Hax_SetHashValue, Hax_GetHashKey, Hax_FirstHashEntry, Hax_NextHashEntry, Hax_HashStats \- procedures to manage hash tables
.SH SYNOPSIS
.nf
\fB#include <hax.h>\fR
.sp
\fBHax_InitHashTable\fR(\fItablePtr, keyType\fR)
.sp
\fBHax_DeleteHashTable\fR(\fItablePtr\fR)
.sp
Hax_HashEntry *
\fBHax_CreateHashEntry\fR(\fItablePtr, key, newPtr\fR)
.sp
\fBHax_DeleteHashEntry\fR(\fIentryPtr\fR)
.sp
Hax_HashEntry *
\fBHax_FindHashEntry\fR(\fItablePtr, key\fR)
.sp
ClientData
\fBHax_GetHashValue\fR(\fIentryPtr\fR)
.sp
\fBHax_SetHashValue\fR(\fIentryPtr, value\fR)
.sp
char *
\fBHax_GetHashKey\fR(\fItablePtr, entryPtr\fR)
.sp
Hax_HashEntry *
\fBHax_FirstHashEntry\fR(\fItablePtr, searchPtr\fR)
.sp
Hax_HashEntry *
\fBHax_NextHashEntry\fR(\fIsearchPtr\fR)
.sp
char *
\fBHax_HashStats\fR(\fItablePtr\fR)
.SH ARGUMENTS
.AS Hax_HashSearch *searchPtr
.AP Hax_HashTable *tablePtr in
Address of hash table structure (for all procedures but
\fBHax_InitHashTable\fR, this must have been initialized by
previous call to \fBHax_InitHashTable\fR).
.AP int keyType in
Kind of keys to use for new hash table.  Must be either
HAX_STRING_KEYS, HAX_ONE_WORD_KEYS, or an integer value
greater than 1.
.AP char *key in
Key to use for probe into table.  Exact form depends on
\fIkeyType\fR used to create table.
.AP int *newPtr out
The word at \fI*newPtr\fR is set to 1 if a new entry was created
and 0 if there was already an entry for \fIkey\fR.
.AP Hax_HashEntry *entryPtr in
Pointer to hash table entry.
.AP ClientData value in
New value to assign to hash table entry.  Need not have type
ClientData, but must fit in same space as ClientData.
.AP Hax_HashSearch *searchPtr in
Pointer to record to use to keep track of progress in enumerating
all the entries in a hash table.
.BE

.SH DESCRIPTION
.PP
A hash table consists of zero or more entries, each consisting of
a key and a value.
Given the key for an entry, the hashing routines can very quickly
locate the entry, and hence its value.
There may be at most one entry in a hash table with a
particular key, but many entries may have the same value.
Keys can take one of three forms:  strings,
one-word values, or integer arrays.
All of the keys in a given table have the same form, which is
specified when the table is initialized.
.PP
The value of a hash table entry can be anything that fits in
the same space as a ``char *'' pointer.
Values for hash table entries are managed entirely by clients,
not by the hash module itself.
Typically each entry's value is a pointer to a data structure
managed by client code.
.PP
Hash tables grow gracefully as the number of entries increases,
so that there are always less than three entries per hash bucket,
on average.
This allows for fast lookups regardless of the number of entries
in a table.
.PP
\fBHax_InitHashTable\fR initializes a structure that describes
a new hash table.
The space for the structure is provided by the caller, not by
the hash module.
The value of \fIkeyType\fR indicates what kinds of keys will
be used for all entries in the table.  \fIKeyType\fR must have
one of the following values:
.IP \fBHAX_STRING_KEYS\fR 25
Keys are null-terminated ASCII strings.
They are passed to hashing routines using the address of the
first character of the string.
.IP \fBHAX_ONE_WORD_KEYS\fR 25
Keys are single-word values;  they are passed to hashing routines
and stored in hash table entries as ``char *'' values.
The pointer value is the key;  it need not (and usually doesn't)
actually point to a string.
.IP \fIother\fR 25
If \fIkeyType\fR is not HAX_STRING_KEYS or HAX_ONE_WORD_KEYS,
then it must be an integer value greater than 1.
In this case the keys will be arrays of ``int'' values, where
\fIkeyType\fR gives the number of ints in each key.
This allows structures to be used as keys.
All keys must have the same size.
Array keys are passed into hashing functions using the address
of the first int in the array.
.PP
\fBHax_DeleteHashTable\fR deletes all of the entries in a hash
table and frees up the memory associated with the table's
bucket array and entries.
It does not free the actual table structure (pointed to
by \fItablePtr\fR), since that memory is assumed to be managed
by the client.
\fBHax_DeleteHashTable\fR also does not free or otherwise
manipulate the values of the hash table entries.
If the entry values point to dynamically-allocated memory, then
it is the client's responsibility to free these structures
before deleting the table.
.PP
\fBHax_CreateHashEntry\fR locates the entry corresponding to a
particular key, creating a new entry in the table if there
wasn't already one with the given key.
If an entry already existed with the given key then \fI*newPtr\fR
is set to zero.
If a new entry was created, then \fI*newPtr\fR is set to a non-zero
value and the value of the new entry will be set to zero.
The return value from \fBHax_CreateHashEntry\fR is a pointer to
the entry, which may be used to retrieve and modify the entry's
value or to delete the entry from the table.
.PP
\fBHax_DeleteHashEntry\fR will remove an existing entry from a
table.
The memory associated with the entry itself will be freed, but
the client is responsible for any cleanup associated with the
entry's value, such as freeing a structure that it points to.
.PP
\fBHax_FindHashEntry\fR is similar to \fBHax_CreateHashEntry\fR
except that it doesn't create a new entry if the key doesn't exist;
instead, it returns NULL as result.
.PP
\fBHax_GetHashValue\fR and \fBHax_SetHashValue\fR are used to
read and write an entry's value, respectively.
Values are stored and retrieved as type ``ClientData'', which is
large enough to hold a pointer value.  On almost all machines this is
large enough to hold an integer value too.
.PP
\fBHax_GetHashKey\fR returns the key for a given hash table entry,
either as a pointer to a string, a one-word (``char *'') key, or
as a pointer to the first word of an array of integers, depending
on the \fIkeyType\fR used to create a hash table.
In all cases \fBHax_GetHashKey\fR returns a result with type
``char *''.
When the key is a string or array, the result of \fBHax_GetHashKey\fR
points to information in the table entry;  this information will
remain valid until the entry is deleted or its table is deleted.
.PP
\fBHax_FirstHashEntry\fR and \fBHax_NextHashEntry\fR may be used
to scan all of the entries in a hash table.
A structure of type ``Hax_HashSearch'', provided by the client,
is used to keep track of progress through the table.
\fBHax_FirstHashEntry\fR initializes the search record and
returns the first entry in the table (or NULL if the table is
empty).
Each susequent call to \fBHax_NextHashEntry\fR returns the
next entry in the table or
NULL if the end of the table has been reached.
A call to \fBHax_FirstHashEntry\fR followed by calls to
\fBHax_NextHashEntry\fR will return each of the entries in
the table exactly once, in an arbitrary order.
It is unadvisable to modify the structure of the table, e.g.
by creating or deleting entries, while the search is in
progress.
.PP
\fBHax_HashStats\fR returns a dynamically-allocated string with
overall information about a hash table, such as the number of
entries it contains, the number of buckets in its hash array,
and the utilization of the buckets.
It is the caller's responsibility to free the result string
by passing it to \fBfree\fR.
.PP
The header file \fBhax.h\fR defines the actual data structures
used to implement hash tables.
This is necessary so that clients can allocate Hax_HashTable
structures and so that macros can be used to read and write
the values of entries.
However, users of the hashing routines should never refer directly
to any of the fields of any of the hash-related data structures;
use the procedures and macros defined here.

.SH KEYWORDS
hash table, key, lookup, search, value
