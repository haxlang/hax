'\"
'\" Copyright 1989 Regents of the University of California
'\" Permission to use, copy, modify, and distribute this
'\" documentation for any purpose and without fee is hereby
'\" granted, provided that this notice appears in all copies.
'\" The University of California makes no representations about
'\" the suitability of this material for any purpose.  It is
'\" provided "as is" without express or implied warranty.
'\" 
'\" $Header: /user6/ouster/tcl/man/RCS/CrtTrace.3,v 1.6 93/01/31 15:35:32 ouster Exp $ SPRITE (Berkeley)
'\" 
.so man.macros
.HS Hax_CreateTrace hax
.BS
.SH NAME
Hax_CreateTrace, Hax_DeleteTrace \- arrange for command execution to be traced
.SH SYNOPSIS
.nf
\fB#include <hax.h>\fR
.sp
Hax_Trace
\fBHax_CreateTrace\fR(\fIinterp, level, proc, clientData\fR)
.sp
\fBHax_DeleteTrace\fR(\fIinterp, trace\fR)
.SH ARGUMENTS
.AS Hax_CmdTraceProc (clientData)()
.AP Hax_Interp *interp in
Interpreter containing command to be traced or untraced.
.AP int level in
Only commands at or below this nesting level will be traced.  1 means
top-level commands only, 2 means top-level commands or those that are
invoked as immediate consequences of executing top-level commands
(procedure bodies, bracketed commands, etc.) and so on.
.AP Hax_CmdTraceProc *proc in
Procedure to call for each command that's executed.  See below for
details on the calling sequence.
.AP ClientData clientData in
Arbitrary one-word value to pass to \fIproc\fR.
.AP Hax_Trace trace in
Token for trace to be removed (return value from previous call
to \fBHax_CreateTrace\fR).
.BE

.SH DESCRIPTION
.PP
\fBHax_CreateTrace\fR arranges for command tracing.  From now on, \fIproc\fR
will be invoked before Hax calls command procedures to process
commands in \fIinterp\fR.  The return value from
\fBHax_CreateTrace\fR is a token for the trace,
which may be passed to \fBHax_DeleteTrace\fR to remove the trace.  There may
be many traces in effect simultaneously for the same command interpreter.
.PP
\fIProc\fR should have arguments and result that match the
type \fBHax_CmdTraceProc\fR:
.nf
.sp
.RS
typedef void Hax_CmdTraceProc(
.RS
ClientData \fIclientData\fR,
Hax_Interp *\fIinterp\fR,
int \fIlevel\fR,
char *\fIcommand\fR,
Hax_CmdProc *\fIcmdProc\fR,
ClientData \fIcmdClientData\fR,
int \fIargc\fR,
char *\fIargv\fR[]));
.sp
.RE
.RE
.fi
The \fIclientData\fP and \fIinterp\fP parameters are
copies of the corresponding arguments given to \fBHax_CreateTrace\fR.
\fIClientData\fR typically points to an application-specific
data structure that describes what to do when \fIproc\fR
is invoked.  \fILevel\fR gives the nesting level of the command
(1 for top-level commands passed to \fBHax_Eval\fR by the application,
2 for the next-level commands passed to \fBHax_Eval\fR as part of parsing
or interpreting level-1 commands, and so on).  \fICommand\fR
points to a string containing the text of the
command, before any argument substitution.
\fICmdProc\fR contains the address of the command procedure that
will be called to process the command (i.e. the \fIproc\fR argument
of some previous call to \fBHax_CreateCommand\fR) and \fIcmdClientData\fR
contains the associated client data for \fIcmdProc\fR (the \fIclientData\fR
value passed to \fBHax_CreateCommand\fR).  \fIArgc\fR and \fIargv\fR give
the final argument information that will be passed to \fIcmdProc\fR, after
command, variable, and backslash substitution.
\fIProc\fR must not modify the \fIcommand\fR or \fIargv\fR strings.
.PP
Tracing will only occur for commands at nesting level less than
or equal to the \fIlevel\fR parameter (i.e. the \fIlevel\fR
parameter to \fIproc\fR will always be less than or equal to the
\fIlevel\fR parameter to \fBHax_CreateTrace\fR).
.PP
Calls to \fIproc\fR will be made by the Hax parser immediately before
it calls the command procedure for the command (\fIcmdProc\fR).  This
occurs after argument parsing and substitution, so tracing for
substituted commands occurs before tracing of the commands
containing the substitutions.  If there is a syntax error in a
command, or if there is no command procedure associated with a
command name, then no tracing will occur for that command.  If a
string passed to Hax_Eval contains multiple commands (bracketed, or
on different lines) then multiple calls to \fIproc\fR will occur,
one for each command.  The \fIcommand\fR string for each of these
trace calls will reflect only a single command, not the entire string
passed to Hax_Eval.
.PP
\fBHax_DeleteTrace\fR removes a trace, so that no future calls will be
made to the procedure associated with the trace.  After \fBHax_DeleteTrace\fR
returns, the caller should never again use the \fItrace\fR token.

.SH KEYWORDS
command, create, delete, interpreter, trace
